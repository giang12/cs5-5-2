Program 0 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
Skipping final_memory.syn.v, seems like a file meant for synthesis
Skipping memc.syn.v, seems like a file meant for synthesis
Skipping memory2c_align.syn.v, seems like a file meant for synthesis
Skipping memory2c.syn.v, seems like a file meant for synthesis
Skipping memv.syn.v, seems like a file meant for synthesis
Skipping stallmem.syn.v, seems like a file meant for synthesis
-------------------------------------------------
Step: 2
Compiling the following verilog files: alu.v and16.v and2_16bit.v and2.v and3.v branch_cond_test.v btr_mod.v cache.v cla_16bit.v clkrst.v clu_16bit.v clu_4bit.v cond_set_old.v cond_set.v control.v decoder3_8.v decode.v dff_16bit.v dff_8bit_tb.v dff_8bit.v dff.v dst_reg_parser.v execution.v ext_mod11_16.v ext_mod5_16.v ext_mod8_16.v fetch.v final_memory.v forward_unit.v four_bank_mem.v fulladder_16bit.v fulladder.v hazard_detect.v inner_module.v inverter_16bit.v lsb_module.v match_both.v memc.v memory2c_align.v memory2c.v memory.v mem_system_hier.v mem_system_perfbench.v mem_system_randbench.v mem_system_ref.v mem_system.v memv.v msb_module.v mux2_1_16bit.v mux2_1_32bit.v mux2_1_8bit.v mux2_1.v mux4_1_16bit.v mux4_1_4bit.v mux4_1.v mux8_1_16bit.v nand2.v nor2.v not1_16bit.v not1.v or16.v or2_16bit.v or2.v or3.v pc_ctr.v proc_hier_bench.v proc_hier_pbench.v proc_hier.v proc.v reg_16bit.v reg_64bit.v regEXMem.v regIDEX.v regIFID.v regMemWB.v rf_bypass.v rf.v sf_left8bit.v sh_1.v sh_2.v sh_4.v sh_8.v shifter.v special_control.v stallmem.v statelogic.v statereg.v writeback.v xor2_16bit.v xor2_3bit.v xor2.v zero_detect.v 
Top module: proc_hier_pbench
Compilation log in wsrun.log
Executing rm -rf __work dump.wlf dump.vcd diff.trace diff.ptrace archsim.trace archsim.ptrace verilogsim.trace verilogsim.ptrace
Executing vlib __work
Executing vlog +define+RANDSEED=3 -work __work alu.v and16.v and2_16bit.v and2.v and3.v branch_cond_test.v btr_mod.v cache.v cla_16bit.v clkrst.v clu_16bit.v clu_4bit.v cond_set_old.v cond_set.v control.v decoder3_8.v decode.v dff_16bit.v dff_8bit_tb.v dff_8bit.v dff.v dst_reg_parser.v execution.v ext_mod11_16.v ext_mod5_16.v ext_mod8_16.v fetch.v final_memory.v forward_unit.v four_bank_mem.v fulladder_16bit.v fulladder.v hazard_detect.v inner_module.v inverter_16bit.v lsb_module.v match_both.v memc.v memory2c_align.v memory2c.v memory.v mem_system_hier.v mem_system_perfbench.v mem_system_randbench.v mem_system_ref.v mem_system.v memv.v msb_module.v mux2_1_16bit.v mux2_1_32bit.v mux2_1_8bit.v mux2_1.v mux4_1_16bit.v mux4_1_4bit.v mux4_1.v mux8_1_16bit.v nand2.v nor2.v not1_16bit.v not1.v or16.v or2_16bit.v or2.v or3.v pc_ctr.v proc_hier_bench.v proc_hier_pbench.v proc_hier.v proc.v reg_16bit.v reg_64bit.v regEXMem.v regIDEX.v regIFID.v regMemWB.v rf_bypass.v rf.v sf_left8bit.v sh_1.v sh_2.v sh_4.v sh_8.v shifter.v special_control.v stallmem.v statelogic.v statereg.v writeback.v xor2_16bit.v xor2_3bit.v xor2.v zero_detect.v
Model Technology ModelSim SE vlog 5.8b Compiler 2004.01 Jan 26 2004
-- Compiling module alu
-- Compiling module and16
-- Compiling module and2_16bit
-- Compiling module and2
-- Compiling module and3
-- Compiling module branch_cond_test
-- Compiling module btr_mod
-- Compiling module cache
-- Compiling module cla_16bit
-- Compiling module clkrst
-- Compiling module clu_16bit
-- Compiling module clu_4bit
-- Compiling module cond_set_old
-- Compiling module cond_set
-- Compiling module control
-- Compiling module decoder3_8
-- Compiling module decode
-- Compiling module dff_16bit
-- Compiling module dff_8bit_tb
-- Compiling module dff_8bit
-- Compiling module dff
-- Compiling module dst_reg_parser
-- Compiling module execution
-- Compiling module ext_mod11_16
-- Compiling module ext_mod5_16
-- Compiling module ext_mod8_16
-- Compiling module fetch
-- Compiling module final_memory
-- Compiling module forward_unit
-- Compiling module four_bank_mem
-- Compiling module fulladder_16bit
-- Compiling module fulladder
-- Compiling module hazard_detect
-- Compiling module inner_module
-- Compiling module inverter_16bit
-- Compiling module lsb_module
-- Compiling module match_both
-- Compiling module memc
-- Compiling module memory2c_align
-- Compiling module memory2c
-- Compiling module memory
-- Compiling module mem_system_hier
-- Compiling module mem_system_perfbench
-- Compiling module mem_system_randbench
-- Compiling module mem_system_ref
-- Compiling module mem_system
-- Compiling module memv
-- Compiling module msb_module
-- Compiling module mux2_1_16bit
-- Compiling module mux2_1_32bit
-- Compiling module mux2_1_8bit
-- Compiling module mux2_1
-- Compiling module mux4_1_16bit
-- Compiling module mux4_1_4bit
-- Compiling module mux4_1
-- Compiling module mux8_1_16bit
-- Compiling module nand2
-- Compiling module nor2
-- Compiling module not1_16bit
-- Compiling module not1
-- Compiling module or16
-- Compiling module or2_16bit
-- Compiling module or2
-- Compiling module or3
-- Compiling module pc_ctr
-- Compiling module proc_hier_bench
-- Compiling module proc_hier_pbench
-- Compiling module proc_hier
-- Compiling module proc
-- Compiling module reg_16bit
-- Compiling module reg_64bit
-- Compiling module regEXMem
-- Compiling module regIDEX
-- Compiling module regIFID
-- Compiling module regMemWB
-- Compiling module rf_bypass
-- Compiling module rf
-- Compiling module sf_left8bit
-- Compiling module sh_1
-- Compiling module sh_2
-- Compiling module sh_4
-- Compiling module sh_8
-- Compiling module shifter
-- Compiling module special_control
-- Compiling module stallmem
-- Compiling module statelogic
-- Compiling module statereg
-- Compiling module writeback
-- Compiling module xor2_16bit
-- Compiling module xor2_3bit
-- Compiling module xor2
-- Compiling module zero_detect

Top level modules:
	and16
	cond_set_old
	dff_8bit_tb
	memory2c_align
	memory2c
	mem_system_perfbench
	mem_system_randbench
	pc_ctr
	proc_hier_bench
	proc_hier_pbench
	reg_64bit
	stallmem
-------------------------------------------------
Step: 3
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 4
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 5
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 6
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_0.asm.
Program 1 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_1.asm.
Program 2 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_2.asm.
Program 3 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_0.asm.
Program 4 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_1.asm.
Program 5 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_2.asm.
Program 6 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_3.asm.
Program 7 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_0.asm.
Program 8 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_1.asm.
Program 9 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_2.asm.
Program 10 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_0.asm.
Program 11 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_1.asm.
Program 12 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_2.asm.
Program 13 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_3.asm.
Program 14 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_4.asm.
Program 15 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/beqz_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/beqz_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 5905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/beqz_0.asm.
Program 16 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_0.asm.
Program 17 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_1.asm.
Program 18 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_2.asm.
Program 19 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_3.asm.
Program 20 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_0.asm.
Program 21 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_2.asm.
Program 22 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_3.asm.
Program 23 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_4.asm.
Program 24 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_5.asm.
Program 25 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_6.asm.
Program 26 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_0.asm.
Program 27 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_1.asm.
Program 28 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_2.asm.
Program 29 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_3.asm.
Program 30 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_4.asm.
Program 31 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_5.asm.
Program 32 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_6.asm.
Program 33 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_7.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_7.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_7.asm.
Program 34 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_8.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_8.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_8.asm.
Program 35 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_0.asm.
Program 36 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_1.asm.
Program 37 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_2.asm.
Program 38 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_3.asm.
Program 39 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 5505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_4.asm.
Program 40 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_0.asm.
Program 41 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_10.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_10.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_10.asm.
Program 42 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_11.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_11.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_11.asm.
Program 43 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_12.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_12.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_12.asm.
Program 44 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_15.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_15.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_15.asm.
Program 45 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_16.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_16.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_16.asm.
Program 46 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_17.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_17.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_17.asm.
Program 47 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_19.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_19.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_19.asm.
Program 48 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4205 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_1.asm.
Program 49 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_22.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_22.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_22.asm.
Program 50 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_24.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_24.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_24.asm.
Program 51 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_25.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_25.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_25.asm.
Program 52 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_26.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_26.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 5005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_26.asm.
Program 53 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_27.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_27.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_27.asm.
Program 54 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_28.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_28.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_28.asm.
Program 55 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_29.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_29.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_29.asm.
Program 56 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_2.asm.
Program 57 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_30.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_30.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 5505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_30.asm.
Program 58 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_31.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_31.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_31.asm.
Program 59 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_32.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_32.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_32.asm.
Program 60 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_33.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_33.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2505 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_33.asm.
Program 61 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_35.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_35.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_35.asm.
Program 62 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_36.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_36.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_36.asm.
Program 63 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_3.asm.
Program 64 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_4.asm.
Program 65 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_5.asm.
Program 66 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_6.asm.
Program 67 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_8.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_8.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_8.asm.
Program 68 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4205 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_0.asm.
Program 69 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_11.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_11.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4605 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_11.asm.
Program 70 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_12.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_12.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_12.asm.
Program 71 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_13.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_13.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_13.asm.
Program 72 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_14.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_14.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_14.asm.
Program 73 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_15.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_15.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_15.asm.
Program 74 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_16.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_16.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_16.asm.
Program 75 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_17.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_17.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4205 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_17.asm.
Program 76 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_18.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_18.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_18.asm.
Program 77 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_19.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_19.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_19.asm.
Program 78 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_1.asm.
Program 79 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_27.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_27.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 7005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_27.asm.
Program 80 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_28.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_28.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_28.asm.
Program 81 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_29.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_29.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_29.asm.
Program 82 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_2.asm.
Program 83 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_30.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_30.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_30.asm.
Program 84 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_31.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_31.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_31.asm.
Program 85 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_32.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_32.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4205 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_32.asm.
Program 86 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_33.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_33.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_33.asm.
Program 87 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_34.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_34.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_34.asm.
Program 88 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_36.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_36.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_36.asm.
Program 89 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 6005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_3.asm.
Program 90 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 5005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_4.asm.
Program 91 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3705 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_5.asm.
Program 92 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3305 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_6.asm.
Program 93 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_7.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_7.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_7.asm.
Program 94 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jr_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jr_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jr_0.asm.
Program 95 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/lbi_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/lbi_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/lbi_0.asm.
Program 96 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/lbi_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/lbi_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/lbi_1.asm.
Program 97 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_0.asm.
Program 98 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_1.asm.
Program 99 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_2.asm.
Program 100 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 6905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_3.asm.
Program 101 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rol_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rol_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rol_0.asm.
Program 102 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rol_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rol_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 13805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rol_1.asm.
Program 103 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_0.asm.
Program 104 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_1.asm.
Program 105 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_2.asm.
Program 106 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_3.asm.
Program 107 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_4.asm.
Program 108 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_0.asm.
Program 109 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_1.asm.
Program 110 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_2.asm.
Program 111 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_3.asm.
Program 112 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_4.asm.
Program 113 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_6.asm.
Program 114 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rori_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rori_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 13805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rori_0.asm.
Program 115 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_0.asm.
Program 116 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_1.asm.
Program 117 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_2.asm.
Program 118 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 30005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_0.asm.
Program 119 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_1.asm.
Program 120 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_2.asm.
Program 121 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_3.asm.
Program 122 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_4.asm.
Program 123 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_5.asm.
Program 124 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_6.asm.
Program 125 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_7.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_7.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_7.asm.
Program 126 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_8.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_8.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_8.asm.
Program 127 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_9.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_9.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_9.asm.
Program 128 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/siic_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/siic_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# hmm....more than 100000 cycles of simulation...error?
# 
# ** Note: $finish    : clkrst.v(41)
#    Time: 10 ms  Iteration: 0  Instance: /proc_hier_pbench/DUT/c0
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
3,4d2
< REG: 0 VALUE: 0x0000
< REG: 4 VALUE: 0x002c
FAILED. See differences in diff.ptrace. Search for ***DIFF***
Use kompare archsim.ptrace verilogsim.ptrace to see differences side by side.
OR use tkdiff.tcl archsim.ptrace verilogsim.ptrace to see differences side by side.
Open dump.wlf in modelsim using, vsim -view dataset=dump.wlf
Program source listing and raw bits are in loadfile.list. Open using gedit loadfile.lst
Program 129 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_0.asm.
Program 130 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_1.asm.
Program 131 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_2.asm.
Program 132 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 14905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_0.asm.
Program 133 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_1.asm.
Program 134 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_2.asm.
Program 135 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_3.asm.
Program 136 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_4.asm.
Program 137 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_5.asm.
Program 138 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_6.asm.
Program 139 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_0.asm.
Program 140 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_1.asm.
Program 141 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_2.asm.
Program 142 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_3.asm.
Program 143 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_4.asm.
Program 144 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_0.asm.
Program 145 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_1.asm.
Program 146 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_2.asm.
Program 147 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_0.asm.
Program 148 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_1.asm.
Program 149 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_2.asm.
Program 150 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 4605 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_5.asm.
Program 151 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_0.asm.
Program 152 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_1.asm.
Program 153 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_2.asm.
Program 154 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_0.asm.
Program 155 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_10.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_10.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_10.asm.
Program 156 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_1.asm.
Program 157 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3405 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_2.asm.
Program 158 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3605 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_3.asm.
Program 159 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_4.asm.
Program 160 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_5.asm.
Program 161 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_6.asm.
Program 162 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_7.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_7.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_7.asm.
Program 163 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_8.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_8.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_8.asm.
Program 164 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_9.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_9.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_9.asm.
Program 165 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_0.asm.
Program 166 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_1.asm.
Program 167 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_2.asm.
Program 168 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_0.asm.
Program 169 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 3105 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_1.asm.
Program 170 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_2.asm.
Program 171 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_3.asm.
Program 172 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_4.asm.
Program 173 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_5.asm.
Program 174 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_6.asm.
Program 175 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_7.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_7.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_7.asm.
Program 176 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_0.asm.
Program 177 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_1.asm.
Program 178 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_2.asm.
Program 179 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_0.asm.
Program 180 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_1.asm.
Program 181 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_2.asm.
Program 182 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_3.asm.
Program 183 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2005 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_4.asm.
Program 184 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_5.asm.
Program 185 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 2905 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_6.asm.
Program 186 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_0.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_0.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_0.asm.
Program 187 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_10.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_10.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_10.asm.
Program 188 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_11.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_11.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_11.asm.
Program 189 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_12.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_12.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_12.asm.
Program 190 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_13.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_13.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_13.asm.
Program 191 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_1.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_1.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_1.asm.
Program 192 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_2.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_2.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_2.asm.
Program 193 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_3.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_3.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_3.asm.
Program 194 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_4.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_4.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_4.asm.
Program 195 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_5.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_5.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_5.asm.
Program 196 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_6.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_6.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_6.asm.
Program 197 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_7.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_7.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_7.asm.
Program 198 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_8.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_8.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_8.asm.
Program 199 /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_9.asm
-------------------------------------------------
Step: 1
Compiling /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_9.asm
Created the following files
loadfile_0.img
loadfile_1.img
loadfile_2.img
loadfile_3.img
loadfile_all.img
loadfile.lst
-------------------------------------------------
Step: 2
Running Verilog simulation...details in wsrun.log
Reading /afs/cs.wisc.edu/s/mentor-2004/common/modeltech-5.8b/tcl/vsim/pref.tcl 

# 5.8b

# vsim -lib __work -c proc_hier_pbench 
# //  ModelSim SE 5.8b Jan 01 2004 Linux 2.6.32-573.7.1.el6.x86_64
# //
# //  Copyright Model Technology, a Mentor Graphics Corporation company, 2004
# //                         All Rights Reserved.
# //                   UNPUBLISHED, LICENSED SOFTWARE.
# //         CONFIDENTIAL AND PROPRIETARY INFORMATION WHICH IS THE
# //        PROPERTY OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS.
# //
# Loading __work.proc_hier_pbench
# Loading __work.proc_hier
# Loading __work.clkrst
# Loading __work.proc
# Loading __work.fetch
# Loading __work.mux2_1_16bit
# Loading __work.mux2_1
# Loading __work.not1
# Loading __work.nand2
# Loading __work.nor2
# Loading __work.reg_16bit
# Loading __work.dff
# Loading __work.mem_system
# Loading __work.cache
# Loading __work.memc
# Loading __work.memv
# Loading __work.four_bank_mem
# Loading __work.final_memory
# Loading __work.statelogic
# Loading __work.statereg
# Loading __work.cla_16bit
# Loading __work.fulladder_16bit
# Loading __work.fulladder
# Loading __work.xor2
# Loading __work.and2
# Loading __work.clu_16bit
# Loading __work.clu_4bit
# Loading __work.or2
# Loading __work.regIFID
# Loading __work.dff_16bit
# Loading __work.dff_8bit
# Loading __work.mux2_1_8bit
# Loading __work.decode
# Loading __work.match_both
# Loading __work.hazard_detect
# Loading __work.mux2_1_32bit
# Loading __work.special_control
# Loading __work.control
# Loading __work.dst_reg_parser
# Loading __work.rf_bypass
# Loading __work.rf
# Loading __work.decoder3_8
# Loading __work.and3
# Loading __work.mux8_1_16bit
# Loading __work.mux4_1_16bit
# Loading __work.mux4_1
# Loading __work.xor2_3bit
# Loading __work.or3
# Loading __work.mux4_1_4bit
# Loading __work.ext_mod8_16
# Loading __work.ext_mod11_16
# Loading __work.ext_mod5_16
# Loading __work.regIDEX
# Loading __work.execution
# Loading __work.forward_unit
# Loading __work.sf_left8bit
# Loading __work.alu
# Loading __work.inverter_16bit
# Loading __work.not1_16bit
# Loading __work.shifter
# Loading __work.sh_1
# Loading __work.msb_module
# Loading __work.inner_module
# Loading __work.lsb_module
# Loading __work.sh_2
# Loading __work.sh_4
# Loading __work.sh_8
# Loading __work.and2_16bit
# Loading __work.or2_16bit
# Loading __work.xor2_16bit
# Loading __work.zero_detect
# Loading __work.btr_mod
# Loading __work.cond_set
# Loading __work.branch_cond_test
# Loading __work.or16
# Loading __work.regEXMem
# Loading __work.memory
# Loading __work.regMemWB
# Loading __work.writeback
VSIM 1> run -all
# Hello world...simulation starting
# See verilogsim.log and verilogsim.ptrace for output
# ** Note: $finish    : proc_hier_pbench.v(115)
#    Time: 1805 ns  Iteration: 0  Instance: /proc_hier_pbench
-------------------------------------------------
Step: 3
Verilog simulation successful
See verilogsim.log and verilogsim.ptrace for output
Created a dump file dump.wlf.
To view waveforms, open with
vsim -view dataset=dump.wlf
-------------------------------------------------
Step: 4
Running arch simulator wiscalculator...
-------------------------------------------------
Step: 5
Comparing arch simulation trace against verilog simulation trace
SUCCESS. Simulations match for /u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_9.asm.
-------------------------------------------------
Final log, saved in summary.log
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_0.asm SUCCESS CPI:5.0 CYCLES:45 ICOUNT:9 IHITRATE: 70.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_1.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/add_2.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_0.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_1.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/addi_3.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_0.asm SUCCESS CPI:5.3 CYCLES:32 ICOUNT:6 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_1.asm SUCCESS CPI:5.3 CYCLES:32 ICOUNT:6 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andn_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_0.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_1.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_3.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/andni_4.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/beqz_0.asm SUCCESS CPI:6.0 CYCLES:60 ICOUNT:10 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_0.asm SUCCESS CPI:10.0 CYCLES:30 ICOUNT:3 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_1.asm SUCCESS CPI:7.5 CYCLES:30 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_2.asm SUCCESS CPI:7.5 CYCLES:30 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bltz_3.asm SUCCESS CPI:11.3 CYCLES:34 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_0.asm SUCCESS CPI:9.5 CYCLES:19 ICOUNT:2 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_2.asm SUCCESS CPI:10.4 CYCLES:21 ICOUNT:2 IHITRATE: 80.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_3.asm SUCCESS CPI:13.9 CYCLES:28 ICOUNT:2 IHITRATE: 60.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_4.asm SUCCESS CPI:13.9 CYCLES:28 ICOUNT:2 IHITRATE: 60.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_5.asm SUCCESS CPI:10.0 CYCLES:30 ICOUNT:3 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/bnez_6.asm SUCCESS CPI:10.0 CYCLES:30 ICOUNT:3 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_0.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_1.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_2.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_3.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_4.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_5.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_6.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_7.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/btr_8.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_0.asm SUCCESS CPI:9.0 CYCLES:36 ICOUNT:4 IHITRATE: 77.8 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_1.asm SUCCESS CPI:9.0 CYCLES:36 ICOUNT:4 IHITRATE: 77.8 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_2.asm SUCCESS CPI:10.4 CYCLES:21 ICOUNT:2 IHITRATE: 80.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_3.asm SUCCESS CPI:18.8 CYCLES:19 ICOUNT:1 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/j_4.asm SUCCESS CPI:11.2 CYCLES:56 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_0.asm SUCCESS CPI:10.4 CYCLES:21 ICOUNT:2 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_1.asm SUCCESS CPI:14.3 CYCLES:43 ICOUNT:3 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_10.asm SUCCESS CPI:12.9 CYCLES:26 ICOUNT:2 IHITRATE: 33.3 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_11.asm SUCCESS CPI:6.0 CYCLES:36 ICOUNT:6 IHITRATE: 77.8 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_12.asm SUCCESS CPI:8.0 CYCLES:32 ICOUNT:4 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_15.asm SUCCESS CPI:9.5 CYCLES:19 ICOUNT:2 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_16.asm SUCCESS CPI:12.9 CYCLES:26 ICOUNT:2 IHITRATE: 50.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_17.asm SUCCESS CPI:9.3 CYCLES:28 ICOUNT:3 IHITRATE: 60.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_19.asm SUCCESS CPI:5.7 CYCLES:34 ICOUNT:6 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_2.asm SUCCESS CPI:10.4 CYCLES:21 ICOUNT:2 IHITRATE: 80.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_22.asm SUCCESS CPI:9.5 CYCLES:19 ICOUNT:2 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_24.asm SUCCESS CPI:12.9 CYCLES:26 ICOUNT:2 IHITRATE: 50.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_25.asm SUCCESS CPI:12.9 CYCLES:26 ICOUNT:2 IHITRATE: 33.3 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_26.asm SUCCESS CPI:8.5 CYCLES:51 ICOUNT:6 IHITRATE: 76.9 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_27.asm SUCCESS CPI:6.8 CYCLES:34 ICOUNT:5 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_28.asm SUCCESS CPI:9.5 CYCLES:19 ICOUNT:2 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_29.asm SUCCESS CPI:9.5 CYCLES:19 ICOUNT:2 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_3.asm SUCCESS CPI:7.0 CYCLES:21 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_30.asm SUCCESS CPI:8.0 CYCLES:56 ICOUNT:7 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_31.asm SUCCESS CPI:9.7 CYCLES:39 ICOUNT:4 IHITRATE: 57.1 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_32.asm SUCCESS CPI:12.9 CYCLES:26 ICOUNT:2 IHITRATE: 50.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_33.asm SUCCESS CPI:12.9 CYCLES:26 ICOUNT:2 IHITRATE: 50.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_35.asm SUCCESS CPI:6.4 CYCLES:32 ICOUNT:5 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_36.asm SUCCESS CPI:5.2 CYCLES:42 ICOUNT:8 IHITRATE: 81.8 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_4.asm SUCCESS CPI:7.5 CYCLES:30 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_5.asm SUCCESS CPI:8.0 CYCLES:40 ICOUNT:5 IHITRATE: 81.8 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_6.asm SUCCESS CPI:6.8 CYCLES:34 ICOUNT:5 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jal_8.asm SUCCESS CPI:7.0 CYCLES:21 ICOUNT:3 IHITRATE: 80.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_0.asm SUCCESS CPI:14.3 CYCLES:43 ICOUNT:3 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_1.asm SUCCESS CPI:11.3 CYCLES:34 ICOUNT:3 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_11.asm SUCCESS CPI:5.9 CYCLES:47 ICOUNT:8 IHITRATE: 72.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_12.asm SUCCESS CPI:8.5 CYCLES:34 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_13.asm SUCCESS CPI:8.5 CYCLES:34 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_14.asm SUCCESS CPI:8.5 CYCLES:34 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_15.asm SUCCESS CPI:8.0 CYCLES:32 ICOUNT:4 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_16.asm SUCCESS CPI:8.0 CYCLES:32 ICOUNT:4 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_17.asm SUCCESS CPI:5.4 CYCLES:43 ICOUNT:8 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_18.asm SUCCESS CPI:6.4 CYCLES:32 ICOUNT:5 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_19.asm SUCCESS CPI:5.6 CYCLES:45 ICOUNT:8 IHITRATE: 70.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_2.asm SUCCESS CPI:13.6 CYCLES:41 ICOUNT:3 IHITRATE: 62.5 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_27.asm SUCCESS CPI:7.9 CYCLES:71 ICOUNT:9 IHITRATE: 68.8 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_28.asm SUCCESS CPI:7.8 CYCLES:39 ICOUNT:5 IHITRATE: 57.1 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_29.asm SUCCESS CPI:7.0 CYCLES:21 ICOUNT:3 IHITRATE: 80.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_3.asm SUCCESS CPI:15.2 CYCLES:61 ICOUNT:4 IHITRATE: 54.5 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_30.asm SUCCESS CPI:9.3 CYCLES:28 ICOUNT:3 IHITRATE: 60.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_31.asm SUCCESS CPI:6.0 CYCLES:48 ICOUNT:8 IHITRATE: 86.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_32.asm SUCCESS CPI:7.2 CYCLES:43 ICOUNT:6 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_33.asm SUCCESS CPI:9.3 CYCLES:28 ICOUNT:3 IHITRATE: 50.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_34.asm SUCCESS CPI:9.3 CYCLES:28 ICOUNT:3 IHITRATE: 60.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_36.asm SUCCESS CPI:9.3 CYCLES:28 ICOUNT:3 IHITRATE: 60.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_4.asm SUCCESS CPI:7.3 CYCLES:51 ICOUNT:7 IHITRATE: 76.9 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_5.asm SUCCESS CPI:7.6 CYCLES:38 ICOUNT:5 IHITRATE: 80.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_6.asm SUCCESS CPI:6.8 CYCLES:34 ICOUNT:5 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jalr_7.asm SUCCESS CPI:7.0 CYCLES:42 ICOUNT:6 IHITRATE: 81.8 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/jr_0.asm SUCCESS CPI:10.0 CYCLES:30 ICOUNT:3 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/lbi_0.asm SUCCESS CPI:5.3 CYCLES:32 ICOUNT:6 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/lbi_1.asm SUCCESS CPI:5.0 CYCLES:45 ICOUNT:9 IHITRATE: 70.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_0.asm SUCCESS CPI:5.8 CYCLES:35 ICOUNT:6 IHITRATE: 77.8 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_1.asm SUCCESS CPI:5.8 CYCLES:35 ICOUNT:6 IHITRATE: 77.8 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_2.asm SUCCESS CPI:5.8 CYCLES:35 ICOUNT:6 IHITRATE: 77.8 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ld_3.asm SUCCESS CPI:6.4 CYCLES:70 ICOUNT:11 IHITRATE: 87.0 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rol_0.asm SUCCESS CPI:4.5 CYCLES:49 ICOUNT:11 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rol_1.asm SUCCESS CPI:4.0 CYCLES:139 ICOUNT:35 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_0.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_1.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_3.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/roli_4.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_0.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_1.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_2.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_3.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_4.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/ror_6.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/rori_0.asm SUCCESS CPI:4.0 CYCLES:139 ICOUNT:35 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_0.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_1.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sco_2.asm SUCCESS CPI:5.3 CYCLES:32 ICOUNT:6 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_0.asm SUCCESS CPI:4.3 CYCLES:301 ICOUNT:70 IHITRATE: 80.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_1.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_2.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_3.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_4.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_5.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_6.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_7.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_8.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/seq_9.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/siic_0.asm FAILED
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_0.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_1.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slbi_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_0.asm SUCCESS CPI:4.1 CYCLES:150 ICOUNT:37 IHITRATE: 73.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_1.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_2.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_3.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_4.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_5.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sle_6.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_0.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_1.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_2.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_3.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sll_4.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_0.asm SUCCESS CPI:5.0 CYCLES:45 ICOUNT:9 IHITRATE: 70.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_1.asm SUCCESS CPI:5.3 CYCLES:32 ICOUNT:6 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slli_2.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_0.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_1.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/slt_5.asm SUCCESS CPI:4.7 CYCLES:47 ICOUNT:10 IHITRATE: 72.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_0.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_1.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/srli_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_0.asm SUCCESS CPI:5.8 CYCLES:35 ICOUNT:6 IHITRATE: 77.8 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_1.asm SUCCESS CPI:5.8 CYCLES:35 ICOUNT:6 IHITRATE: 77.8 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_10.asm SUCCESS CPI:7.2 CYCLES:29 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_2.asm SUCCESS CPI:5.8 CYCLES:35 ICOUNT:6 IHITRATE: 77.8 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_3.asm SUCCESS CPI:5.3 CYCLES:37 ICOUNT:7 IHITRATE: 80.0 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_4.asm SUCCESS CPI:7.2 CYCLES:29 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_5.asm SUCCESS CPI:7.2 CYCLES:29 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_6.asm SUCCESS CPI:7.2 CYCLES:29 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_7.asm SUCCESS CPI:7.2 CYCLES:29 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_8.asm SUCCESS CPI:7.2 CYCLES:29 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/st_9.asm SUCCESS CPI:7.2 CYCLES:29 ICOUNT:4 IHITRATE: 66.7 DHITRATE: 0.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_0.asm SUCCESS CPI:6.2 CYCLES:31 ICOUNT:5 IHITRATE: 71.4 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_1.asm SUCCESS CPI:6.2 CYCLES:31 ICOUNT:5 IHITRATE: 71.4 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/stu_2.asm SUCCESS CPI:6.2 CYCLES:31 ICOUNT:5 IHITRATE: 71.4 DHITRATE: 50.0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_0.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_1.asm SUCCESS CPI:5.3 CYCLES:32 ICOUNT:6 IHITRATE: 71.4 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_2.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_3.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_4.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_5.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_6.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/sub_7.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_0.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_1.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/subi_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_0.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_1.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_2.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_3.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_4.asm SUCCESS CPI:5.2 CYCLES:21 ICOUNT:4 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_5.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xor_6.asm SUCCESS CPI:6.0 CYCLES:30 ICOUNT:5 IHITRATE: 66.7 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_0.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_1.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_10.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_11.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_12.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_13.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_2.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_3.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_4.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_5.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_6.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_7.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_8.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
/u/k/a/karu//courses/cs552/spring2013/handouts/testprograms/public/inst_tests/xori_9.asm SUCCESS CPI:6.3 CYCLES:19 ICOUNT:3 IHITRATE: 75.0 DHITRATE: 0
